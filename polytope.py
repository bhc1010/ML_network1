from sympy.utilities.iterables import multiset_permutations
import numpy as np

class Polytope:
    
    def __init__(self, verts, picardNum, vectorDim):
        self.verts = verts
        self.vectorDim = vectorDim
        self.picardNum = picardNum
        self.baseVerts = [self.verts]
        self.altVerts = []          ## altVerts[[(_,_) , (_,_) , ...], [(_,_) , (_,_) , ...], ....] (no picard numbers)
        self.data = []              ## data[([0,1,-1,-1,1,0,....], picardNum) , ...]  

    ### First alternate verts are generated by rotations and reflections, then these are padded out with zeros,
    ###     permutations are generated, and duplicates removed. These alternate polytopes are vectorized into duples 
    ###     containing 1.) a list of a certain vert config and 2.) its picard vector then this tuple is appended into data[]

    def addReflections(self):
        xReflection, yReflection = [], []
        for v in self.verts:
            x = v[0]
            y = v[1] * -1
            xReflection.append((x,y))
        for v in self.verts:
            x = v[0] * -1
            y = v[1]
            yReflection.append((x,y))
        self.baseVerts.append(xReflection)
        self.baseVerts.append(yReflection)
    
    def addRotations(self):
        ##
        rotations = []
        for v in self.verts:
            x = v[0] * -1
            y = v[1] * -1
            rotations.append((x,y))
        self.baseVerts.append(rotations)
        ##
        rotations = []
        for v in self.verts:
            x = v[1] * -1
            y = v[0] * -1
            rotations.append((x,y))
        self.baseVerts.append(rotations)

    def padWithZeros(self):
        if len(self.verts) != self.vectorDim:
            for i in range(len(self.verts), self.vectorDim, 1):
                self.verts.append((0,0))

    def permuteVerts(self):
        for i in range(0, len(self.baseVerts)):
            for p in multiset_permutations(self.baseVerts[i]):
                self.altVerts.append(p)

    def removeDuplicates(self):
        unique = []
        setList = list(set(map(tuple, self.altVerts)))
        for item in setList:
            unique.append(list(item))
        self.altVerts = unique

    def vectorizeData(self):
        x = []
        for i in range(0, len(self.altVerts)):
            for v in self.altVerts[i]:
                x.append([v[0]])
                x.append([v[1]])
            self.data.append((x, self.picardNum))
            x=[]
    
    def generateData(self):
        self.padWithZeros()
        self.addReflections()
        self.addRotations()
        self.permuteVerts()
        self.removeDuplicates()
        self.vectorizeData()